const { mergeFunction, mergeFunctionName } = require('../util/stl_jsonb_deep_merge')

exports.up = async (knex) => {
  const { schema } = knex.client.connectionSettings || {}
  // We need to inject schema name in function body for recursion
  if (!schema) throw new Error(`Schema name required to create ${mergeFunctionName} function`)
  await knex.schema.raw(mergeFunction(schema))

  await knex.schema.createTable('apiKey', table => {
    table.string('id').primary()
    table.string('createdDate', 24)
    table.string('updatedDate', 24)
    table.string('name')
    table.string('key')
    table.jsonb('roles')
    table.jsonb('permissions')
    table.jsonb('readNamespaces')
    table.jsonb('editNamespaces')
    table.jsonb('metadata')
    table.jsonb('platformData')

    table.unique('key')
  })

  await knex.schema.createTable('assessment', table => {
    table.string('id').primary()
    table.string('createdDate', 24)
    table.string('updatedDate', 24)
    table.string('statement')
    table.string('status')
    table.string('assetId')
    table.string('transactionId')
    table.string('ownerId')
    table.string('takerId')
    table.string('emitterId')
    table.string('receiverId')
    table.jsonb('signers')
    table.jsonb('signCodes')
    table.integer('nbSigners')
    table.string('expirationDate', 24)
    table.string('signedDate', 24)
    table.string('assessmentDate', 24)
    table.jsonb('metadata')
    table.jsonb('platformData')

    table.index('assetId')
    table.index('ownerId')
    table.index('takerId')
    table.index('emitterId')
    table.index('receiverId')
  })

  await knex.schema.createTable('asset', table => {
    table.string('id').primary()
    table.string('createdDate', 24)
    table.string('updatedDate', 24)
    table.string('name')
    table.string('ownerId')
    table.text('description')
    table.string('categoryId')
    table.jsonb('locations')
    table.boolean('validated')
    table.boolean('active')
    table.string('assetTypeId')
    table.integer('quantity')
    table.string('currency')
    table.float('price')
    table.jsonb('customAttributes')
    table.jsonb('metadata')
    table.jsonb('platformData')

    table.index('ownerId')
    table.index('categoryId')
    table.index('assetTypeId')
    table.index('customAttributes', 'asset_customattributes_index', 'GIN')
  })

  await knex.schema.createTable('assetType', table => {
    table.string('id').primary()
    table.string('createdDate', 24)
    table.string('updatedDate', 24)
    table.string('name')
    table.boolean('timeBased')
    table.boolean('infiniteStock')
    table.jsonb('pricing')
    table.jsonb('timing')
    table.jsonb('unavailableWhen')
    table.jsonb('transactionProcess')
    table.jsonb('namespaces')
    table.boolean('isDefault')
    table.boolean('active')
    table.jsonb('metadata')
    table.jsonb('platformData')
  })

  await knex.schema.createTable('authMean', table => {
    table.string('id').primary()
    table.string('createdDate', 24)
    table.string('updatedDate', 24)
    table.string('password')
    table.string('provider')
    table.string('identifier')
    table.jsonb('tokens')
    table.string('userId')

    table.index('identifier')
    table.index('userId')
  })

  await knex.schema.createTable('authToken', table => {
    table.string('id').primary()
    table.string('createdDate', 24)
    table.string('updatedDate', 24)
    table.string('type')
    table.string('value')
    table.string('userId')
    table.jsonb('reference')
    table.string('expirationDate', 24)

    table.unique('value')
    table.index('userId')
  })

  await knex.schema.createTable('availability', table => {
    table.string('id').primary()
    table.string('createdDate', 24)
    table.string('updatedDate', 24)
    table.string('assetId')
    table.string('startDate', 24)
    table.string('endDate', 24)
    table.string('quantity')
    table.string('recurringPattern')
    table.string('recurringTimezone')
    table.jsonb('recurringDuration')
    table.jsonb('metadata')
    table.jsonb('platformData')

    table.index('assetId')
  })

  await knex.schema.createTable('category', table => {
    table.string('id').primary()
    table.string('createdDate', 24)
    table.string('updatedDate', 24)
    table.string('name')
    table.string('parentId')
    table.jsonb('metadata')
    table.jsonb('platformData')
  })

  await knex.schema.createTable('config', table => {
    table.string('id').primary()
    table.string('createdDate', 24)
    table.string('updatedDate', 24)
    table.string('access')
    table.jsonb('stelace')
    table.jsonb('custom')
    table.jsonb('theme')

    table.unique('access')
  })

  await knex.schema.createTable('customAttribute', table => {
    table.string('id').primary()
    table.string('createdDate', 24)
    table.string('updatedDate', 24)
    table.string('name')
    table.string('type')
    table.jsonb('listValues')
    table.jsonb('metadata')
    table.jsonb('platformData')

    table.unique('name')
  })

  await knex.schema.createTable('document', table => {
    table.string('id').primary()
    table.string('createdDate', 24)
    table.string('updatedDate', 24)
    table.string('authorId')
    table.string('targetId')
    table.string('type')
    table.string('label')
    table.jsonb('data')
    table.jsonb('metadata')
    table.jsonb('platformData')

    table.index('data', 'document_data_gin_index', 'GIN')
  })

  await knex.schema.createTable('entry', table => {
    table.string('id').primary()
    table.string('createdDate', 24)
    table.string('updatedDate', 24)
    table.string('collection')
    table.string('locale')
    table.string('name')
    table.jsonb('fields')
    table.jsonb('metadata')

    table.unique(['locale', 'name'])
  })

  await knex.schema.createTable('event', table => {
    table.string('id').primary()
    table.string('createdDate', 24)
    table.string('type')
    table.string('objectType')
    table.string('objectId')
    table.jsonb('object')
    table.jsonb('changesRequested')
    table.jsonb('relatedObjectsIds')
    table.string('apiVersion')
    table.string('parentId')
    table.string('emitter')
    table.string('emitterId')
    table.jsonb('metadata')

    table.index('type')
    table.index('objectId')
    table.index('object', 'event_object_gin_index', 'GIN')
    table.index('parentId')
  })

  await knex.schema.createTable('internalAvailability', table => {
    table.bigIncrements('id').primary()
    table.string('assetId')
    table.string('transactionId')
    table.string('assetTypeId')
    table.string('transactionStatus')
    table.boolean('unavailable')
    table.specificType('datesRange', 'tstzrange')
    table.timestamp('startDate')
    table.timestamp('endDate')
    table.integer('quantity')

    table.index('assetId')
    table.index('transactionId')
    table.index(['assetId', 'datesRange'])
  })

  await knex.schema.createTable('message', table => {
    table.string('id').primary()
    table.string('createdDate', 24)
    table.string('updatedDate', 24)
    table.string('topicId')
    table.string('conversationId')
    table.text('content')
    table.jsonb('attachments')
    table.boolean('read')
    table.string('senderId')
    table.string('receiverId')
    table.jsonb('metadata')
    table.jsonb('platformData')

    table.index('conversationId')
    table.index('senderId')
    table.index('receiverId')
  })

  await knex.schema.createTable('order', table => {
    table.string('id').primary()
    table.string('createdDate', 24)
    table.string('updatedDate', 24)
    table.jsonb('lines')
    table.jsonb('moves')
    table.float('amountDue')
    table.float('amountPaid')
    table.float('amountRemaining')
    table.string('currency')
    table.string('senderId')
    table.boolean('paymentAttempted')
    table.jsonb('metadata')
    table.jsonb('platformData')

    table.index('lines', 'order_lines_gin_index', 'GIN')
    table.index('moves', 'order_moves_gin_index', 'GIN')
    table.index('senderId')
  })

  await knex.schema.createTable('role', table => {
    table.string('id').primary()
    table.string('createdDate', 24)
    table.string('updatedDate', 24)
    table.string('name')
    table.string('value')
    table.jsonb('customRole')
    table.string('parentId')
    table.jsonb('permissions')
    table.jsonb('readNamespaces')
    table.jsonb('editNamespaces')
    table.jsonb('metadata')
    table.jsonb('platformData')

    table.index('value')
  })

  await knex.schema.createTable('task', table => {
    table.string('id').primary()
    table.string('createdDate', 24)
    table.string('updatedDate', 24)
    table.string('executionDate', 24)
    table.string('recurringPattern')
    table.string('recurringTimezone')
    table.string('eventType')
    table.jsonb('eventMetadata')
    table.string('eventObjectId')
    table.boolean('active')
    table.jsonb('metadata')
    table.jsonb('platformData')
  })

  await knex.schema.createTable('transaction', table => {
    table.string('id').primary()
    table.string('createdDate', 24)
    table.string('updatedDate', 24)
    table.string('assetId')
    table.jsonb('assetSnapshot')
    table.string('assetTypeId')
    table.jsonb('assetType')
    table.string('status')
    table.jsonb('statusHistory')
    table.string('ownerId')
    table.string('takerId')
    table.integer('quantity')
    table.string('startDate', 24)
    table.string('endDate', 24)
    table.jsonb('duration')
    table.string('timeUnit')
    table.float('unitPrice')
    table.float('value')
    table.float('ownerAmount')
    table.float('takerAmount')
    table.float('platformAmount')
    table.float('ownerFees')
    table.float('takerFees')
    table.string('currency')
    table.string('completedDate', 24)
    table.string('cancelledDate', 24)
    table.string('cancellationReason')
    table.jsonb('metadata')
    table.jsonb('platformData')

    table.index('assetId')
  })

  await knex.schema.createTable('user', table => {
    table.string('id').primary()
    table.string('createdDate', 24)
    table.string('updatedDate', 24)
    table.string('username')
    table.string('displayName')
    table.string('firstname')
    table.string('lastname')
    table.string('email')
    table.text('description')
    table.jsonb('roles')
    table.jsonb('organizations')
    table.jsonb('metadata')
    table.jsonb('platformData')

    table.unique('username')
    table.index('roles', 'user_roles_index', 'GIN')
  })

  await knex.schema.createTable('webhook', table => {
    table.string('id').primary()
    table.string('createdDate', 24)
    table.string('updatedDate', 24)
    table.string('name')
    table.string('targetUrl')
    table.string('event')
    table.string('apiVersion')
    table.boolean('active')
    table.jsonb('metadata')
    table.jsonb('platformData')

    table.index('event')
  })

  await knex.schema.createTable('webhookLog', table => {
    table.string('id').primary()
    table.string('createdDate', 24)
    table.string('webhookId')
    table.string('eventId')
    table.string('status')
    table.jsonb('metadata')

    table.index('webhookId')
    table.index('eventId')
  })

  await knex.schema.createTable('workflow', table => {
    table.string('id').primary()
    table.string('createdDate', 24)
    table.string('updatedDate', 24)
    table.string('name')
    table.text('description')
    table.jsonb('context')
    table.string('notifyUrl')
    table.string('event')
    table.jsonb('run')
    table.jsonb('computed')
    table.boolean('active')
    table.jsonb('stats')
    table.string('apiVersion')
    table.jsonb('metadata')
    table.jsonb('platformData')

    table.index('event')
  })

  await knex.schema.createTable('workflowLog', table => {
    table.string('id').primary()
    table.string('createdDate', 24)
    table.string('workflowId')
    table.string('eventId')
    table.string('runId')
    table.string('type')
    table.integer('statusCode')
    table.jsonb('step')
    table.jsonb('metadata')

    table.index('workflowId')
    table.index('eventId')
    table.index('runId')
  })
}

exports.down = async (knex) => {
  await knex.schema.dropTableIfExists('workflowLog')
  await knex.schema.dropTableIfExists('workflow')
  await knex.schema.dropTableIfExists('webhookLog')
  await knex.schema.dropTableIfExists('webhook')
  await knex.schema.dropTableIfExists('user')
  await knex.schema.dropTableIfExists('transaction')
  await knex.schema.dropTableIfExists('task')
  await knex.schema.dropTableIfExists('role')
  await knex.schema.dropTableIfExists('order')
  await knex.schema.dropTableIfExists('message')
  await knex.schema.dropTableIfExists('internalAvailability')
  await knex.schema.dropTableIfExists('event')
  await knex.schema.dropTableIfExists('entry')
  await knex.schema.dropTableIfExists('document')
  await knex.schema.dropTableIfExists('customAttribute')
  await knex.schema.dropTableIfExists('config')
  await knex.schema.dropTableIfExists('category')
  await knex.schema.dropTableIfExists('availability')
  await knex.schema.dropTableIfExists('authToken')
  await knex.schema.dropTableIfExists('authMean')
  await knex.schema.dropTableIfExists('assetType')
  await knex.schema.dropTableIfExists('asset')
  await knex.schema.dropTableIfExists('assessment')
  await knex.schema.dropTableIfExists('apiKey')

  await knex.schema.raw(`DROP FUNCTION IF EXISTS ${mergeFunctionName}(jsonb, jsonb)`)
}
